// Generated by CoffeeScript 1.3.3
(function() {
  var child, dnode, http, phanta, shoe, startPhantomProcess, wrap,
    __slice = [].slice;

  dnode = require('dnode');

  http = require('http');

  shoe = require('shoe');

  child = require('child_process');

  phanta = [];

  startPhantomProcess = function(binary, port, args) {
    var ps;
    ps = child.spawn(binary, args.concat([__dirname + '/shim.js', port]));
    ps.stdout.on('data', function(data) {
      return console.log("phantom stdout: " + data);
    });
    ps.stderr.on('data', function(data) {
      if (data.toString('utf8').match(/No such method.*socketSentData/)) {
        return;
      }
      return console.warn("phantom stderr: " + data);
    });
    return ps;
  };

  process.on('exit', function() {
    var phantom, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = phanta.length; _i < _len; _i++) {
      phantom = phanta[_i];
      _results.push(phantom.exit());
    }
    return _results;
  });

  wrap = function(ph) {
    ph._createPage = ph.createPage;
    return ph.createPage = function(cb) {
      return ph._createPage(function(page) {
        page._evaluate = page.evaluate;
        page.evaluate = function() {
          var args, cb, fn;
          fn = arguments[0], cb = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          return page._evaluate.apply(page, [fn.toString(), cb].concat(args));
        };
        return cb(page);
      });
    };
  };

  module.exports = {
    create: function() {
      var args, binary, cb, httpServer, phantom, port, sock, _i;
      args = 4 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 3) : (_i = 0, []), cb = arguments[_i++], binary = arguments[_i++], port = arguments[_i++];
      if (binary == null) {
        binary = 'phantomjs';
      }
      if (port == null) {
        port = 12300;
      }
      phantom = null;
      httpServer = http.createServer();
      httpServer.listen(port);
      httpServer.on('listening', function() {
        var ps;
        ps = startPhantomProcess(binary, port, args);
        return ps.on('exit', function(code) {
          var p;
          httpServer.close();
          if (phantom) {
            phantom && phantom.onExit && phantom.onExit();
            return phanta = (function() {
              var _j, _len, _results;
              _results = [];
              for (_j = 0, _len = phanta.length; _j < _len; _j++) {
                p = phanta[_j];
                if (p !== phantom) {
                  _results.push(p);
                }
              }
              return _results;
            })();
          }
        });
      });
      sock = shoe(function(stream) {
        var d;
        d = dnode();
        d.on('remote', function(phantom) {
          wrap(phantom);
          phanta.push(phantom);
          return typeof cb === "function" ? cb(phantom) : void 0;
        });
        d.pipe(stream);
        return stream.pipe(d);
      });
      return sock.install(httpServer, '/dnode');
    }
  };

}).call(this);
